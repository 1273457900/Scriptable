{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "birthday-cake"
  },
  "name" : "Birthday",
  "script" : "\/\/ 先引入Components 中的Calendar.scriptable,然后引入当前文件即可正常使用\n\nconst { Calendar } = importModule(\"Calendar\");\nconst $ = importModule(\"Env\");\n\nconst prefix = \"boxjs.net\"; \/\/ 输入 BoxJs 的域名前缀 boxjs.com || boxjs.net || 自定义\n\nconst blurBackground = true; \/\/ 开启背景虚化 true 值类型布尔或数字 ，默认 0.7 取值范围 0 至 1\n\nconst imageBackground = true; \/\/ 设置配置背景图片\nconst forceImageUpdate = false; \/\/ 设置为true将重置小部件的背景图像\n\nconst avatarImage = true; \/\/ 设置左边照片  ： 默认左边照片为 BoxJS 的媒体图片\nconst forceAvatarUpdate = false; \/\/ true重置左边照片\n\nconst textFormat = {\n  \/\/ Set the default font and color.\n  defaultText: { size: 16, color: \"ffffff\", font: \"regular\" }, \/\/ 默认字体颜色\n  light: { size: 16, color: \"D0D3D4\", font: \"light\" }, \/\/ 夜间字体颜色\n};\n\nconst defaultData = {\n  username: \"\", \/\/ 姓名\n  time: \"\", \/\/ 生日日期\n  nongli: \"\", \/\/ 农历生日\n  eday: \"\", \/\/相识\n  isLeapMonth: false, \/\/如果是农历闰月第四个参数赋值true即可\n  mediaImg: \"\", \/\/ 媒体图片\n};\n\nclass YaYaBirthday extends Calendar {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.data = props.data;\n    this.prefix = props.prefix;\n    this.widgetSize = config.runsInWidget ? config.widgetFamily : \"large\";\n    this.mode = Device.isUsingDarkAppearance();\n    this.textFormat = this.mode ? textFormat.light : textFormat.defaultText;\n    if (blurBackground) {\n      if (typeof blurBackground === \"number\") {\n        this.backgroundOpacity = blurBackground;\n      } else {\n        console.log(this.mode);\n        this.backgroundOpacity = this.mode ? 0.7 : 0.3;\n      }\n    }\n  }\n\n  init = async () => {\n    const data = await this.fetchBoxJsData(\"@birthday\");\n    if (data) {\n      this.data = data;\n    }\n    this.getCalendarData();\n  };\n\n  fetchBoxJsData = async (key) => {\n    const url = `http:\/\/${this.prefix}\/query\/boxdata`;\n    const boxdata = await $.get({ url });\n    const data = {};\n    let isReadBoxJs = false;\n    Object.keys(defaultData).forEach((params) => {\n      const datasKey = `${key}.${params}`;\n      const dataValue = boxdata.datas[datasKey];\n      if (dataValue) {\n        isReadBoxJs = true;\n        data[params] = dataValue;\n      }\n    });\n    if (isReadBoxJs) {\n      return data;\n    }\n    return undefined;\n  };\n\n  fetchImg = async (url) => {\n    const response = new Request(url);\n    return await response.loadImage();\n  };\n\n  setHeader = async (widget, icon, title) => {\n    let header = widget.addStack();\n    header.centerAlignContent();\n    let _icon = header.addImage(await this.fetchImg(icon));\n    _icon.imageSize = new Size(14, 14);\n    _icon.cornerRadius = 4;\n    header.addSpacer(10);\n    provideText(title, header, this.textFormat);\n    widget.addSpacer(30);\n    return widget;\n  };\n\n  setImgeTop = async (widget) => {\n    const header = widget.addStack();\n    header.centerAlignContent();\n    provideText(`🐣${this.data.username}🐣`, header, this.textFormat); \/\/ 设置头信息\n    return widget;\n  };\n\n  setWidgetBackGround = async (widget) => {\n    if (imageBackground) {\n      const files = FileManager.local();\n      const path = files.joinPath(files.documentsDirectory(), \"birthday-image\");\n      const exists = files.fileExists(path);\n      if (exists && (config.runsInWidget || !forceImageUpdate)) {\n        const image = files.readImage(path);\n        widget.backgroundImage = await this.setShadowImage(\n          image,\n          this.backgroundOpacity\n        );\n      } else if (!exists && config.runsInWidget) {\n        widget.backgroundColor = Color.gray();\n      } else {\n        const img = await Photos.fromLibrary();\n        widget.backgroundImage = await this.setShadowImage(\n          img,\n          this.backgroundOpacity\n        );\n        files.writeImage(path, img);\n      }\n    } else {\n      let gradient = new LinearGradient();\n      let gradientSettings = await setupGradient();\n      if (this.mode) {\n        gradient.colors = gradientSettings.night.color();\n        gradient.locations = gradientSettings.night.position();\n      } else {\n        gradient.colors = gradientSettings.sunrise.color();\n        gradient.locations = gradientSettings.sunrise.position();\n      }\n      widget.backgroundGradient = gradient;\n    }\n    return widget;\n  };\n\n  setWidget = async (body) => {\n    const {\n      animal,\n      astro,\n      gregorian,\n      nextBirthday,\n      meetDay,\n      birthdayText,\n    } = this.contentText;\n    const { IMonthCn, IDayCn } = gregorian;\n    let right = body.addStack();\n    right.layoutVertically();\n    this.setRightCell(`🐽相:${animal}`, right, \"8E44AD\"); \/\/ 属相\n    this.setRightCell(`🌠座:${astro}`, right, \"45B39D\"); \/\/ 属相\n    if (meetDay) {\n      this.setRightCell(`💖遇:${meetDay} 天`, right, \"F7DC6F\");\n    }\n    this.setRightCell(\n      `🎂生:${nextBirthday.cYear}-${nextBirthday.cMonth}-${nextBirthday.cDay} (${birthdayText[1]}天)`,\n      right,\n      \"F1948A\"\n    );\n    \/\/ this.setRightCell(`📆公:${cYear}-${cMonth}-${cDay}`, right);\n    this.setRightCell(`📆农:${IMonthCn}${IDayCn}`, right, \"2E86C1\");\n    return body;\n  };\n\n  setWidgetFooter = async (widget) => {\n    widget.addSpacer(10);\n    const text = await this.getEveryDaySay();\n    this.setRightCell(text, widget, \"F44336\");\n    const textItem = provideText(\n      `—— @${this.data.username}`,\n      widget,\n      this.textFormat\n    );\n    textItem.rightAlignText();\n\n    return widget;\n  };\n\n  \/\/ 给图片加透明遮罩\n  setShadowImage = async (img, opacity) => {\n    if (!opacity) return img;\n    let ctx = new DrawContext();\n    \/\/ 获取图片的尺寸\n    ctx.size = img.size;\n\n    ctx.drawImageInRect(\n      img,\n      new Rect(0, 0, img.size[\"width\"], img.size[\"height\"])\n    );\n    ctx.setFillColor(new Color(\"#000000\", opacity));\n    ctx.fillRect(new Rect(0, 0, img.size[\"width\"], img.size[\"height\"]));\n\n    let res = await ctx.getImage();\n    return res;\n  };\n\n  setRightCell = async (text, cell, prefixColor = \"fff\") => {\n    const subConditionStack = cell.addStack();\n    let tomorrowLine = subConditionStack.addImage(\n      drawVerticalLine(new Color(prefixColor, 0.8), 12)\n    );\n    tomorrowLine.imageSize = new Size(3, 28);\n    subConditionStack.addSpacer(5);\n    let rowCell = subConditionStack.addStack();\n    rowCell.setPadding(4, 0, 0, 0);\n    provideText(text, rowCell, this.textFormat);\n    cell.addSpacer(1);\n  };\n\n  getEveryDaySay = async () => {\n    const response = await $.get({\n      url: \"https:\/\/api.uomg.com\/api\/rand.qinghua?format=json\",\n    });\n    return response.content;\n  };\n\n  getEdayNumber = (date) => {\n    var initDay = date.split(\"-\");\n    var obj = {\n      cYear: parseInt(initDay[0]),\n      cMonth: parseInt(initDay[1]),\n      cDay: parseInt(initDay[2]),\n    };\n    return Math.abs(this.daysBetween(obj));\n  };\n\n  getCalendarData = () => {\n    const { time, nongli, isLeapMonth, eday } = this.data;\n    const _data = time.split(\"-\");\n    const opt = {\n      year: parseInt(_data[0]),\n      month: parseInt(_data[1]),\n      day: parseInt(_data[2]),\n      nongli,\n      isLeapMonth,\n    };\n\n    const response = {};\n    response.birthdayText = this.birthday(opt);\n    response.nextBirthday = response.birthdayText[0];\n\n    const solarData =\n      nongli === \"true\"\n        ? this.lunar2solar(opt.year, opt.month, opt.day, isLeapMonth)\n        : this.solar2lunar(opt.year, opt.month, opt.day);\n    response.gregorian = solarData;\n    response.animal = `${this.getAnimalZodiacToEmoji(solarData.Animal)}-${\n      solarData.Animal\n    }`;\n    response.astro = `${this.getAstroToEmoji(solarData.astro)}-${\n      solarData.astro\n    }`;\n    if (this.verifyTime(eday)) {\n      response.meetDay = this.getEdayNumber(eday);\n    }\n    this.contentText = response;\n  };\n\n  getEnableLeft = async (widget) => {\n    if (!avatarImage && !this.data.mediaImg) return widget;\n    let body = widget.addStack();\n    body.url = \"\";\n    let left = body.addStack();\n    left.layoutVertically();\n    await this.setImgeTop(left);\n    left.addSpacer(5);\n    let leftImg = await this.fetchImg(this.data.mediaImg);\n    if (avatarImage) {\n      const files = FileManager.local();\n      const path = files.joinPath(\n        files.documentsDirectory(),\n        \"birthday-avatar-image\"\n      );\n      const exists = files.fileExists(path);\n      if (exists && (config.runsInWidget || !forceAvatarUpdate)) {\n        leftImg = files.readImage(path);\n      } else if (!exists && config.runsInWidget) {\n        widget.backgroundColor = Color.gray();\n      } else {\n        const img = await Photos.fromLibrary();\n        leftImg = img;\n        files.writeImage(path, img);\n      }\n    }\n    let leftContent = left.addImage(leftImg);\n    leftContent.imageSize = new Size(120, 120);\n    leftContent.cornerRadius = 5;\n    body.addSpacer(15);\n    return body;\n  };\n\n  renderErrorWidget = (widget) => {\n    widget.addText(\"暂不支持该尺寸组件\");\n    return widget;\n  };\n\n  renderSmall = async (widget) => {\n    widget.setPadding(0, 10, 0, 0);\n    return await this.setWidget(widget);\n  };\n\n  renderMedium = async (widget) => {\n    let body = await this.getEnableLeft(widget);\n    await this.setWidget(body);\n    return widget;\n  };\n\n  renderLarge = async (widget) => {\n    widget.setPadding(0, 10, 0, 10);\n    await this.setHeader(\n      widget,\n      \"https:\/\/raw.githubusercontent.com\/Orz-3\/task\/master\/birthday.png\",\n      \"破壳日🎂\"\n    );\n    let body = await this.getEnableLeft(widget);\n    await this.setWidget(body);\n    widget.addSpacer(20);\n    await this.setWidgetFooter(widget);\n    return widget;\n  };\n\n  render = async () => {\n    const widget = new ListWidget();\n    \/\/ widget.setPadding(0, 0, 0, 0);\n    let w = await this.setWidgetBackGround(widget);\n    switch (this.widgetSize) {\n      case \"small\": {\n        w = await this.renderSmall(w);\n        w.presentSmall();\n        break;\n      }\n      case \"medium\": {\n        w = await this.renderMedium(w);\n        w.presentMedium();\n        break;\n      }\n      case \"large\": {\n        w = await this.renderLarge(w);\n        w.presentLarge();\n        break;\n      }\n      default: {\n        w = await this.renderErrorWidget(w);\n        w.presentSmall();\n        break;\n      }\n    }\n    Script.setWidget(w);\n    Script.complete();\n  };\n}\n\n\/\/ Draw the vertical line in the tomorrow view.\nfunction drawVerticalLine(color, height) {\n  const width = 2;\n\n  let draw = new DrawContext();\n  draw.opaque = false;\n  draw.respectScreenScale = true;\n  draw.size = new Size(width, height);\n\n  let barPath = new Path();\n  \/\/ const barHeight = height;\n  barPath.addRoundedRect(new Rect(0, 0, height, height), width \/ 2, width \/ 2);\n  draw.addPath(barPath);\n  draw.setFillColor(color);\n  draw.fillPath();\n  return draw.getImage();\n}\n\n\/\/ Add formatted text to a container.\nfunction provideText(string, container, format = textFormat.defaultText) {\n  const textItem = container.addText(string);\n  const textFont = format.font || textFormat.defaultText.font;\n  const textSize = format.size || textFormat.defaultText.size;\n  const textColor = format.color || textFormat.defaultText.color;\n\n  textItem.font = provideFont(textFont, textSize);\n  textItem.textColor = new Color(textColor);\n\n  return textItem;\n}\n\n\/\/ Set up the gradient for the widget background.\nasync function setupGradient() {\n  return {\n    dawn: {\n      color() {\n        return [new Color(\"142C52\"), new Color(\"1B416F\"), new Color(\"62668B\")];\n      },\n      position() {\n        return [0, 0.5, 1];\n      },\n    },\n\n    sunrise: {\n      color() {\n        return [new Color(\"274875\"), new Color(\"766f8d\"), new Color(\"f0b35e\")];\n      },\n      position() {\n        return [0, 0.8, 1.5];\n      },\n    },\n\n    midday: {\n      color() {\n        return [new Color(\"3a8cc1\"), new Color(\"90c0df\")];\n      },\n      position() {\n        return [0, 1];\n      },\n    },\n\n    noon: {\n      color() {\n        return [new Color(\"b2d0e1\"), new Color(\"80B5DB\"), new Color(\"3a8cc1\")];\n      },\n      position() {\n        return [-0.2, 0.2, 1.5];\n      },\n    },\n\n    sunset: {\n      color() {\n        return [new Color(\"32327A\"), new Color(\"662E55\"), new Color(\"7C2F43\")];\n      },\n      position() {\n        return [0.1, 0.9, 1.2];\n      },\n    },\n\n    twilight: {\n      color() {\n        return [new Color(\"021033\"), new Color(\"16296b\"), new Color(\"414791\")];\n      },\n      position() {\n        return [0, 0.5, 1];\n      },\n    },\n\n    night: {\n      color() {\n        return [\n          new Color(\"16296b\"),\n          new Color(\"021033\"),\n          new Color(\"021033\"),\n          new Color(\"113245\"),\n        ];\n      },\n      position() {\n        return [-0.5, 0.2, 0.5, 1];\n      },\n    },\n  };\n}\n\n\/\/ Provide a font based on the input.\nfunction provideFont(fontName, fontSize) {\n  const fontGenerator = {\n    ultralight: function () {\n      return Font.ultraLightSystemFont(fontSize);\n    },\n    light: function () {\n      return Font.lightSystemFont(fontSize);\n    },\n    regular: function () {\n      return Font.regularSystemFont(fontSize);\n    },\n    medium: function () {\n      return Font.mediumSystemFont(fontSize);\n    },\n    semibold: function () {\n      return Font.semiboldSystemFont(fontSize);\n    },\n    bold: function () {\n      return Font.boldSystemFont(fontSize);\n    },\n    heavy: function () {\n      return Font.heavySystemFont(fontSize);\n    },\n    black: function () {\n      return Font.blackSystemFont(fontSize);\n    },\n    italic: function () {\n      return Font.italicSystemFont(fontSize);\n    },\n  };\n\n  const systemFont = fontGenerator[fontName];\n  if (systemFont) {\n    return systemFont();\n  }\n  return new Font(fontName, fontSize);\n}\n\n(async () => {\n  const renderBirthday = new YaYaBirthday({ prefix, data: defaultData });\n  await renderBirthday.init(); \/\/  初始化组件\n  await renderBirthday.render(); \/\/ 渲染 widget\n})();\n",
  "share_sheet_inputs" : [

  ]
}